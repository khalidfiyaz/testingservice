version: '3.9'

services:
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: backend_test
    restart: unless-stopped
    ports:
      - "5001:5001"
    volumes:
      - .:/app
    environment:
      FLASK_APP: backend.py
      FLASK_ENV: development
      MICROSERVICE_URL: http://cloned_microservice:5001
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: passwordgroup50
    command: python /app/backend.py
    depends_on:
      postgres:
        condition: service_healthy

  cloned_microservice:
    build:
      context: .
      dockerfile: CM_Docker.dockerfile
    container_name: cloned_microservice
    ports:
      - "8000:5001"
    command: ["dotnet", "ApiGateway.dll"]
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: passwordgroup50
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: passwordgroup50
      POSTGRES_DB: mydb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=passwordgroup50
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=mydb
      - GF_DATABASE_USER=myuser
      - GF_DATABASE_PASSWORD=passwordgroup50
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      postgres:
        condition: service_healthy

networks:
  default:
    driver: bridge

volumes:
  grafana-storage:
  postgres-data:
